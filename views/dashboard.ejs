<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <title>Dashboard - EcoCleanSystem</title>
  <link rel="stylesheet" href="/css/layout.css" />
  <link rel="stylesheet" href="/css/nav.css" />
  <link rel="stylesheet" href="/css/calendar.css" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
  <%- include('partials/nav', { activePage: 'dashboard' }) %>

  <div class="calendar-container">
    <div class="calendar-box">
      <div class="calendar-header">
        <div class="navigation-buttons">
          <button id="prevMonthBtn">&lt;</button>
          <button id="nextMonthBtn">&gt;</button>
        </div>
        <div class="month-year-container">
          <span class="month-display" id="monthDisplay"></span>
          <span class="year-display" id="yearDisplay"></span>
        </div>
      </div>
      <table id="calendar">
        <thead>
          <tr>
            <th>Seg</th>
            <th>Ter</th>
            <th>Qua</th>
            <th>Qui</th>
            <th>Sex</th>
            <th>S√°b</th>
            <th>Dom</th>
          </tr>
        </thead>
        <tbody id="calendarBody"></tbody>
      </table>
    </div>
  </div>

  <script>
  document.addEventListener('DOMContentLoaded', function() {
    const calendarBody = document.getElementById('calendarBody');
    const monthDisplay = document.getElementById('monthDisplay');
    const yearDisplay = document.getElementById('yearDisplay');
    const prevMonthBtn = document.getElementById('prevMonthBtn');
    const nextMonthBtn = document.getElementById('nextMonthBtn');
    let currentDate = new Date();

    const meses = [
      'Janeiro', 'Fevereiro', 'Mar√ßo', 'Abril', 'Maio', 'Junho',
      'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'
    ];

    async function getAgendamentos() {
      try {
        const response = await fetch('/agendamentos/api/agendamentos');
        if (!response.ok) throw new Error('Erro ao buscar agendamentos');
        return await response.json();
      } catch (error) {
        console.error('Erro:', error);
        return [];
      }
    }

    function showDayDetails(date, events) {
      const modalHtml = `
        <div class="modal-overlay">
          <div class="modal-content">
            <h3>Agendamentos - ${formatDateBR(date)}</h3>
            <div class="events-list">
              ${events.length > 0 
                ? events.map(event => `
                  <div class="event-item">
                    <div class="event-service">${event.title || event.nome_servico || 'Servi√ßo'}</div>
                    <div class="event-time">${event.hora_agendada || event.time || ''}</div>
                    <div class="event-client">üë§ ${event.nome_cliente || event.cliente || 'Cliente'}</div>
                    ${event.observacoes ? `<div class="event-observations">üìù ${event.observacoes}</div>` : ''}
                  </div>
                `).join('')
                : '<p style="text-align:center;color:#aad1e6;padding:20px;">N√£o h√° agendamentos para este dia.</p>'
              }
            </div>
            <button class="close-modal" onclick="this.closest('.modal-overlay').remove()">Fechar</button>
          </div>
        </div>
      `;
      document.body.insertAdjacentHTML('beforeend', modalHtml);
    }

    function formatDateBR(dateString) {
      const date = new Date(dateString + 'T00:00:00');
      return date.toLocaleDateString('pt-BR');
    }

    function formatTime(timeString) {
      if (!timeString) return '';
      return timeString.substring(0, 5);
    }

    async function gerarCalendario(date, eventos) {
      calendarBody.innerHTML = '';
      const year = date.getFullYear();
      const month = date.getMonth();
      
      yearDisplay.textContent = year;
      monthDisplay.textContent = meses[month];
      
      const firstDay = new Date(year, month, 1).getDay();
      const startDay = firstDay === 0 ? 6 : firstDay - 1;
      const lastDay = new Date(year, month + 1, 0).getDate();
      
      let day = 1;

      for (let semana = 0; semana < 6; semana++) {
        const tr = document.createElement('tr');
        for (let diaSemana = 0; diaSemana < 7; diaSemana++) {
          const td = document.createElement('td');
          
          if (semana === 0 && diaSemana < startDay) {
            td.classList.add('disabled');
          } else if (day > lastDay) {
            td.classList.add('disabled');
          } else {
            const dataFormatada = `${year}-${String(month + 1).padStart(2,'0')}-${String(day).padStart(2,'0')}`;
            const hoje = new Date();
            
            // Verifica se √© hoje
            if (day === hoje.getDate() && month === hoje.getMonth() && year === hoje.getFullYear()) {
              td.classList.add('today');
            }

            // Cria conte√∫do do dia
            const dayContent = document.createElement('div');
            dayContent.style.position = 'relative';
            dayContent.style.height = '100%';
            dayContent.style.padding = '4px';

            // N√∫mero do dia
            const dayNumber = document.createElement('div');
            dayNumber.className = 'day-number';
            dayNumber.textContent = day;
            dayContent.appendChild(dayNumber);

            // Eventos do dia
            const eventosDoDia = eventos.filter(e => e.date === dataFormatada || e.data_agendada === dataFormatada);
            
            if (eventosDoDia.length > 0) {
              td.classList.add('event-day');
              
              // Indicador de quantidade de eventos
              const eventIndicator = document.createElement('div');
              eventIndicator.className = 'event-indicator';
              eventIndicator.textContent = eventosDoDia.length;
              eventIndicator.title = `${eventosDoDia.length} agendamento(s)`;
              dayContent.appendChild(eventIndicator);

              // Lista de eventos (m√°ximo 3 vis√≠veis)
              const eventsContainer = document.createElement('div');
              eventsContainer.style.marginTop = '4px';
              
              eventosDoDia.slice(0, 3).forEach(event => {
                const eventElement = document.createElement('div');
                eventElement.className = 'calendar-event';
                eventElement.textContent = `${formatTime(event.hora_agendada || event.time)} - ${event.title || event.nome_servico}`;
                eventElement.title = `${event.title || event.nome_servico} - ${event.nome_cliente || event.cliente}`;
                eventsContainer.appendChild(eventElement);
              });

              if (eventosDoDia.length > 3) {
                const moreEvents = document.createElement('div');
                moreEvents.className = 'calendar-event';
                moreEvents.textContent = `+${eventosDoDia.length - 3} mais`;
                moreEvents.style.background = '#6c757d';
                eventsContainer.appendChild(moreEvents);
              }

              dayContent.appendChild(eventsContainer);
            }

            td.appendChild(dayContent);
            
            // Evento de clique para mostrar detalhes
            td.addEventListener('click', function() {
              if (!td.classList.contains('disabled')) {
                showDayDetails(dataFormatada, eventosDoDia);
              }
            });
            
            day++;
          }
          tr.appendChild(td);
        }
        calendarBody.appendChild(tr);
        if (day > lastDay) break;
      }
    }

    async function atualizarCalendario() {
      const eventos = await getAgendamentos();
      gerarCalendario(currentDate, eventos);
    }

    prevMonthBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() - 1);
      atualizarCalendario();
    });

    nextMonthBtn.addEventListener('click', () => {
      currentDate.setMonth(currentDate.getMonth() + 1);
      atualizarCalendario();
    });

    // Inicializar calend√°rio
    atualizarCalendario();
  });
  </script>
</body>
</html>